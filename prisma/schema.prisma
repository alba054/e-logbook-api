// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @db.VarChar(100)
  username           String               @unique @db.VarChar(100)
  password           String               @db.VarChar(255)
  email              String?              @unique @db.VarChar(255)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  profilePic         String?              @db.VarChar(255)
  student            Student?             @relation(fields: [studentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  role               Role
  badges             Badge[]
  PasswordResetToken PasswordResetToken[]
  studentId          String?              @db.VarChar(100)
  CheckInCheckOut    CheckInCheckOut[]
  supervisor         Supervisor?          @relation(fields: [supervisorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supervisorId       String?              @db.VarChar(100)

  @@map("users")
}

model Student {
  id                      String              @id @db.VarChar(100)
  studentId               String              @unique @db.VarChar(25)
  clinicId                String?             @db.VarChar(25)
  preClinicId             String?             @db.VarChar(25)
  graduationDate          Int?                @db.UnsignedInt
  phoneNumber             String?             @db.VarChar(50)
  address                 String?             @db.VarChar(255)
  fullName                String?             @db.VarChar(255)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  activeUnit              Unit?               @relation(fields: [unitId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  academicAdvisor         Supervisor?         @relation(fields: [academicSupervisorId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "academicSupervisor")
  supervisingDPK          Supervisor?         @relation(fields: [supervisingSupervisorId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "supervisingDPK")
  examinerDPK             Supervisor?         @relation(fields: [examinerSupervisorId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "examinerDPK")
  academicSupervisorId    String?
  supervisingSupervisorId String?
  examinerSupervisorId    String?
  rsStation               String?             @db.VarChar(100)
  pkmStation              String?             @db.VarChar(100)
  periodLengthStation     BigInt              @default(0) @db.UnsignedBigInt
  clinicalRecords         ClinicalRecord[]
  CheckInCheckOut         CheckInCheckOut[]
  unitId                  String?             @db.VarChar(100)
  User                    User[]
  ScientificSession       ScientificSession[]
  SelfReflection          SelfReflection[]
  Skill                   Skill[]
  Case                    Case[]
  Competency              Competency[]

  @@map("students")
}

model Supervisor {
  id                 String              @id @db.VarChar(100)
  fullname           String?             @db.VarChar(255)
  supervisorId       String?             @unique @db.VarChar(50)
  User               User[]
  academinSupervisor Student[]           @relation("academicSupervisor")
  supervisingDPK     Student[]           @relation("supervisingDPK")
  examinerDPK        Student[]           @relation("examinerDPK")
  ClinicalRecord     ClinicalRecord[]
  ScientificSession  ScientificSession[]

  @@map("supervisors")
}

model Badge {
  id    Int    @id @default(autoincrement())
  name  Badges @unique
  users User[]

  @@map("badges")
}

model PasswordResetToken {
  username  String   @db.VarChar(30)
  token     String   @unique() @db.VarChar(128)
  tokenExp  BigInt   @db.UnsignedBigInt
  otp       String?  @db.VarChar(5)
  user      User     @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([username, token])
  @@map("password_reset_tokens")
}

model Unit {
  id                String              @id @db.VarChar(100)
  name              String              @db.VarChar(100)
  clinicalRecords   ClinicalRecord[]
  affectedParts     AffectedPart[]
  examinationTypes  ExaminationType[]
  DiagnosisType     DiagnosisType[]
  ManagementType    ManagementType[]
  CheckInCheckOut   CheckInCheckOut[]
  Student           Student[]
  ScientificSession ScientificSession[]
  SelfReflection    SelfReflection[]
  Skill             Skill[]
  Case              Case[]
  Competency        Competency[]

  @@map("units")
}

model CheckInCheckOut {
  id                    String              @id @db.VarChar(100)
  checkIn               Boolean             @default(false)
  checkOut              Boolean?
  checkInTime           BigInt?             @db.UnsignedBigInt
  checkOutTime          BigInt?             @db.UnsignedBigInt
  checkInStatus         VerificationStatus  @default(INPROCESS)
  checkOutStatus        VerificationStatus?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  unit                  Unit                @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student               Student             @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId                String              @db.VarChar(100)
  studentId             String              @db.VarChar(100)
  headDivVerificator    User?               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                String?             @db.VarChar(100)
  clinicalRecordDone    Boolean             @default(false)
  scientificSessionDone Boolean             @default(false)
  selfReflectionDone    Boolean             @default(false)
  skillDone             Boolean             @default(false)
  caseDone              Boolean             @default(false)

  @@unique([unitId, studentId])
  @@map("check_ins_check_outs")
}

model ClinicalRecord {
  id                        String                      @id @db.VarChar(100)
  recordId                  String                      @db.VarChar(5)
  patientName               String                      @db.VarChar(255)
  patientAge                Int                         @db.UnsignedInt
  gender                    Gender
  notes                     String?                     @db.Text
  attachment                String?                     @db.VarChar(255)
  verificationStatus        VerificationStatus          @default(INPROCESS)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  Student                   Student?                    @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId                 String?                     @db.VarChar(100)
  Unit                      Unit?                       @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId                    String?                     @db.VarChar(100)
  studentFeedback           String?                     @db.Text
  supervisorFeedback        String?                     @db.Text
  rating                    Int?                        @default(0) @db.UnsignedTinyInt()
  supervisor                Supervisor                  @relation(fields: [supervisorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ClinicalRecordExamination ClinicalRecordExamination[]
  ClinicalRecordDiagnosis   ClinicalRecordDiagnosis[]
  ClinicalRecordManagement  ClinicalRecordManagement[]
  supervisorId              String                      @db.VarChar(100)

  @@map("clinical_records")
}

model AffectedPart {
  id                        String                      @id @db.VarChar(100)
  partName                  String                      @db.VarChar(100)
  Unit                      Unit?                       @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId                    String?                     @db.VarChar(100)
  ClinicalRecordExamination ClinicalRecordExamination[]
  ClinicalRecordDiagnosis   ClinicalRecordDiagnosis[]
  ClinicalRecordManagement  ClinicalRecordManagement[]

  @@map("affected_parts")
}

model ExaminationType {
  id                        String                      @id @db.VarChar(100)
  typeName                  String                      @db.VarChar(100)
  Unit                      Unit?                       @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId                    String?                     @db.VarChar(100)
  ClinicalRecordExamination ClinicalRecordExamination[]

  @@map("examination_types")
}

model ClinicalRecordExamination {
  affectedPart      AffectedPart    @relation(fields: [affectedPartId], references: [id])
  examinationType   ExaminationType @relation(fields: [examinationTypeId], references: [id])
  clinicalRecord    ClinicalRecord  @relation(fields: [clinicalRecordId], references: [id])
  affectedPartId    String          @db.VarChar(100)
  examinationTypeId String          @db.VarChar(100)
  clinicalRecordId  String          @db.VarChar(100)

  @@id([affectedPartId, examinationTypeId, clinicalRecordId])
  @@map("clinical_record_examinations")
}

model DiagnosisType {
  id                      String                    @id @db.VarChar(100)
  typeName                String                    @db.VarChar(100)
  Unit                    Unit?                     @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId                  String?                   @db.VarChar(100)
  ClinicalRecordDiagnosis ClinicalRecordDiagnosis[]

  @@map("diagnosis_types")
}

model ClinicalRecordDiagnosis {
  affectedPart     AffectedPart   @relation(fields: [affectedPartId], references: [id])
  DiagnosisType    DiagnosisType  @relation(fields: [DiagnosisTypeId], references: [id])
  clinicalRecord   ClinicalRecord @relation(fields: [clinicalRecordId], references: [id])
  affectedPartId   String         @db.VarChar(100)
  DiagnosisTypeId  String         @db.VarChar(100)
  clinicalRecordId String         @db.VarChar(100)

  @@id([affectedPartId, DiagnosisTypeId, clinicalRecordId])
  @@map("clinical_record_diagnosis")
}

model ManagementType {
  id                       String                     @id @db.VarChar(100)
  typeName                 String                     @db.VarChar(100)
  Unit                     Unit?                      @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId                   String?                    @db.VarChar(100)
  ClinicalRecordmanagement ClinicalRecordManagement[]

  @@map("management_types")
}

model ManagementRole {
  id                       String                     @id @db.VarChar(100)
  roleName                 String                     @db.VarChar(100)
  ClinicalRecordManagement ClinicalRecordManagement[]

  @@map("management_roles")
}

model ClinicalRecordManagement {
  affectedPart     AffectedPart   @relation(fields: [affectedPartId], references: [id])
  managementType   ManagementType @relation(fields: [managementTypeId], references: [id])
  managementRole   ManagementRole @relation(fields: [managementRoleId], references: [id])
  clinicalRecord   ClinicalRecord @relation(fields: [clinicalRecordId], references: [id])
  affectedPartId   String         @db.VarChar(100)
  managementTypeId String         @db.VarChar(100)
  clinicalRecordId String         @db.VarChar(100)
  managementRoleId String         @db.VarChar(100)

  @@id([affectedPartId, managementTypeId, clinicalRecordId, managementRoleId])
  @@map("clinical_record_managements")
}

model SessionType {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(100)
  ScientificSession ScientificSession[]

  @@map("session_types")
}

model ScientificRole {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(100)
  ScientificSession ScientificSession[]

  @@map("scientific_roles")
}

model ScientificSession {
  id                 String             @id @db.VarChar(100)
  Unit               Unit?              @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId             String?            @db.VarChar(100)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  topic              String             @db.VarChar(255)
  title              String             @db.VarChar(255)
  reference          String             @db.VarChar(255)
  note               String?            @db.Text
  attachment         String?            @db.VarChar(255)
  studentFeedback    String?            @db.Text
  supervisorFeedback String?            @db.Text
  verificationStatus VerificationStatus @default(INPROCESS)
  supervisor         Supervisor         @relation(fields: [supervisorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supervisorId       String             @db.VarChar(100)
  Student            Student?           @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId          String?            @db.VarChar(100)
  rating             Int?               @default(0) @db.UnsignedTinyInt()
  sessionType        SessionType        @relation(fields: [sessionTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scientificRole     ScientificRole     @relation(fields: [scientificRoleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sessionTypeId      Int
  scientificRoleId   Int

  @@map("scientific_session")
}

model SelfReflection {
  id                 String             @id @db.VarChar(100)
  Unit               Unit?              @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId             String?            @db.VarChar(100)
  createdAt          DateTime           @default(now())
  content            String             @db.Text
  Student            Student?           @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId          String?            @db.VarChar(100)
  rating             Int?               @default(0) @db.UnsignedTinyInt
  verificationStatus VerificationStatus @default(INPROCESS)

  @@map("self_reflections")
}

model Competency {
  id                 String             @id @db.VarChar(100)
  name               String             @db.VarChar(255)
  competencyType     CompetencyType
  rating             Int                @default(0) @db.UnsignedTinyInt
  verificationStatus VerificationStatus @default(INPROCESS)
  Student            Student?           @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId          String?            @db.VarChar(100)
  Unit               Unit?              @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId             String?            @db.VarChar(100)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  type               Type

  @@map("competencies")
}

model Skill {
  id                 String             @id @db.VarChar(100)
  name               String             @db.VarChar(255)
  type               CompetencyType
  rating             Int                @default(0) @db.UnsignedTinyInt
  verificationStatus VerificationStatus @default(INPROCESS)
  Student            Student?           @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId          String?            @db.VarChar(100)
  Unit               Unit?              @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId             String?            @db.VarChar(100)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@map("skills")
}

model Case {
  id                 String             @id @db.VarChar(100)
  name               String             @db.VarChar(255)
  type               CompetencyType
  rating             Int                @default(0) @db.UnsignedTinyInt
  verificationStatus VerificationStatus @default(INPROCESS)
  Student            Student?           @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId          String?            @db.VarChar(100)
  Unit               Unit?              @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId             String?            @db.VarChar(100)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt

  @@map("cases")
}

enum CompetencyType {
  OBTAINED
  DISCUSSED
  OBSERVED
}

enum Type {
  SKILL
  CASE
}

enum Badges {
  CEU
  HEAD_DIV // kepala bagian
}

enum Role {
  SUPERVISOR
  STUDENT
  ADMIN
  DPK
  ER // tim kordik
}

enum Gender {
  MALE
  FEMALE
}

enum VerificationStatus {
  VERIFIED
  INPROCESS
  UNVERIFIED
}
