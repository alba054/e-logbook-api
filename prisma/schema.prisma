// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @db.VarChar(100)
  username           String               @unique @db.VarChar(100)
  password           String               @db.VarChar(255)
  email              String?              @unique @db.VarChar(255)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  profilePic         String?              @db.VarChar(255)
  student            Student?             @relation(fields: [studentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  role               Role
  badges             Badge[]
  PasswordResetToken PasswordResetToken[]
  studentId          String?              @db.VarChar(100)
  CheckInCheckOut    CheckInCheckOut[]
  supervisor         Supervisor?          @relation(fields: [supervisorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supervisorId       String?              @db.VarChar(100)

  @@map("users")
}

model Student {
  id                      String                @id @db.VarChar(100)
  studentId               String                @unique @db.VarChar(25)
  clinicId                String?               @db.VarChar(25)
  preClinicId             String?               @db.VarChar(25)
  graduationDate          Int?                  @db.UnsignedInt
  phoneNumber             String?               @db.VarChar(50)
  address                 String?               @db.VarChar(255)
  fullName                String?               @db.VarChar(255)
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  activeUnit              Unit?                 @relation(fields: [unitId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  academicAdvisor         Supervisor?           @relation(fields: [academicSupervisorId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "academicSupervisor")
  supervisingDPK          Supervisor?           @relation(fields: [supervisingSupervisorId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "supervisingDPK")
  examinerDPK             Supervisor?           @relation(fields: [examinerSupervisorId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "examinerDPK")
  academicSupervisorId    String?
  supervisingSupervisorId String?
  examinerSupervisorId    String?
  rsStation               String?               @db.VarChar(100)
  pkmStation              String?               @db.VarChar(100)
  periodLengthStation     BigInt                @default(0) @db.UnsignedBigInt
  clinicalRecords         ClinicalRecord[]
  CheckInCheckOut         CheckInCheckOut[]
  unitId                  String?               @db.VarChar(100)
  User                    User[]
  ScientificSession       ScientificSession[]
  SelfReflection          SelfReflection[]
  Skill                   Skill[]
  Case                    Case[]
  Competency              Competency[]
  SGL                     SGL[]
  CST                     CST[]
  DailyActivity           DailyActivity[]
  Assesment               Assesment[]
  ProblemConsultation     ProblemConsultation[]

  @@map("students")
}

model Supervisor {
  id                 String              @id @db.VarChar(100)
  fullname           String?             @db.VarChar(255)
  supervisorId       String?             @unique @db.VarChar(50)
  User               User[]
  academinSupervisor Student[]           @relation("academicSupervisor")
  supervisingDPK     Student[]           @relation("supervisingDPK")
  examinerDPK        Student[]           @relation("examinerDPK")
  ClinicalRecord     ClinicalRecord[]
  ScientificSession  ScientificSession[]
  SglTopic           SglTopic[]
  CstTopic           CstTopic[]
  Activity           Activity[]

  @@map("supervisors")
}

model Badge {
  id    Int    @id @default(autoincrement())
  name  Badges @unique
  users User[]

  @@map("badges")
}

model PasswordResetToken {
  username  String   @db.VarChar(30)
  token     String   @unique() @db.VarChar(128)
  tokenExp  BigInt   @db.UnsignedBigInt
  otp       String?  @db.VarChar(5)
  user      User     @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([username, token])
  @@map("password_reset_tokens")
}

model Unit {
  id                  String                @id @db.VarChar(100)
  name                String                @db.VarChar(100)
  clinicalRecords     ClinicalRecord[]
  affectedParts       AffectedPart[]
  examinationTypes    ExaminationType[]
  DiagnosisType       DiagnosisType[]
  ManagementType      ManagementType[]
  CheckInCheckOut     CheckInCheckOut[]
  Student             Student[]
  ScientificSession   ScientificSession[]
  SelfReflection      SelfReflection[]
  Skill               Skill[]
  Case                Case[]
  Competency          Competency[]
  SkillType           SkillType[]
  CaseType            CaseType[]
  SGL                 SGL[]
  CST                 CST[]
  DailyActivity       DailyActivity[]
  Assesment           Assesment[]
  ProblemConsultation ProblemConsultation[]
  Reference           Reference[]

  @@map("units")
}

model CheckInCheckOut {
  id                    String              @id @db.VarChar(100)
  checkIn               Boolean             @default(false)
  checkOut              Boolean?
  checkInTime           BigInt?             @db.UnsignedBigInt
  checkOutTime          BigInt?             @db.UnsignedBigInt
  countCheckIn          Int                 @default(0) @db.UnsignedInt
  checkInStatus         VerificationStatus  @default(INPROCESS)
  checkOutStatus        VerificationStatus?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  unit                  Unit                @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  student               Student             @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId                String              @db.VarChar(100)
  studentId             String              @db.VarChar(100)
  headDivVerificator    User?               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                String?             @db.VarChar(100)
  clinicalRecordDone    Boolean             @default(false)
  scientificSessionDone Boolean             @default(false)
  selfReflectionDone    Boolean             @default(false)
  skillDone             Boolean             @default(false)
  caseDone              Boolean             @default(false)
  sglDone               Boolean             @default(false)
  cstDone               Boolean             @default(false)
  dailyActiviyDone      Boolean             @default(false)

  @@unique([unitId, studentId])
  @@map("check_ins_check_outs")
}

model ClinicalRecord {
  id                        String                      @id @db.VarChar(100)
  recordId                  String                      @db.VarChar(5)
  patientName               String                      @db.VarChar(255)
  patientAge                Int                         @db.UnsignedInt
  gender                    Gender
  notes                     String?                     @db.Text
  attachment                String?                     @db.VarChar(255)
  verificationStatus        VerificationStatus          @default(INPROCESS)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  Student                   Student?                    @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId                 String?                     @db.VarChar(100)
  Unit                      Unit?                       @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId                    String?                     @db.VarChar(100)
  studentFeedback           String?                     @db.Text
  supervisorFeedback        String?                     @db.Text
  rating                    Int?                        @default(0) @db.UnsignedTinyInt()
  supervisor                Supervisor                  @relation(fields: [supervisorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ClinicalRecordExamination ClinicalRecordExamination[]
  ClinicalRecordDiagnosis   ClinicalRecordDiagnosis[]
  ClinicalRecordManagement  ClinicalRecordManagement[]
  supervisorId              String                      @db.VarChar(100)

  @@map("clinical_records")
}

model AffectedPart {
  id                        String                      @id @db.VarChar(100)
  partName                  String                      @db.VarChar(100)
  Unit                      Unit?                       @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId                    String?                     @db.VarChar(100)
  ClinicalRecordExamination ClinicalRecordExamination[]
  ClinicalRecordDiagnosis   ClinicalRecordDiagnosis[]
  ClinicalRecordManagement  ClinicalRecordManagement[]

  @@map("affected_parts")
}

model ExaminationType {
  id                        String                      @id @db.VarChar(100)
  typeName                  String                      @db.VarChar(100)
  Unit                      Unit?                       @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId                    String?                     @db.VarChar(100)
  ClinicalRecordExamination ClinicalRecordExamination[]

  @@map("examination_types")
}

model ClinicalRecordExamination {
  affectedPart      AffectedPart    @relation(fields: [affectedPartId], references: [id])
  examinationType   ExaminationType @relation(fields: [examinationTypeId], references: [id])
  clinicalRecord    ClinicalRecord  @relation(fields: [clinicalRecordId], references: [id])
  affectedPartId    String          @db.VarChar(100)
  examinationTypeId String          @db.VarChar(100)
  clinicalRecordId  String          @db.VarChar(100)

  @@id([affectedPartId, examinationTypeId, clinicalRecordId])
  @@map("clinical_record_examinations")
}

model DiagnosisType {
  id                      String                    @id @db.VarChar(100)
  typeName                String                    @db.VarChar(100)
  Unit                    Unit?                     @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId                  String?                   @db.VarChar(100)
  ClinicalRecordDiagnosis ClinicalRecordDiagnosis[]

  @@map("diagnosis_types")
}

model ClinicalRecordDiagnosis {
  affectedPart     AffectedPart   @relation(fields: [affectedPartId], references: [id])
  DiagnosisType    DiagnosisType  @relation(fields: [DiagnosisTypeId], references: [id])
  clinicalRecord   ClinicalRecord @relation(fields: [clinicalRecordId], references: [id])
  affectedPartId   String         @db.VarChar(100)
  DiagnosisTypeId  String         @db.VarChar(100)
  clinicalRecordId String         @db.VarChar(100)

  @@id([affectedPartId, DiagnosisTypeId, clinicalRecordId])
  @@map("clinical_record_diagnosis")
}

model ManagementType {
  id                       String                     @id @db.VarChar(100)
  typeName                 String                     @db.VarChar(100)
  Unit                     Unit?                      @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId                   String?                    @db.VarChar(100)
  ClinicalRecordmanagement ClinicalRecordManagement[]

  @@map("management_types")
}

model ManagementRole {
  id                       String                     @id @db.VarChar(100)
  roleName                 String                     @db.VarChar(100)
  ClinicalRecordManagement ClinicalRecordManagement[]

  @@map("management_roles")
}

model ClinicalRecordManagement {
  affectedPart     AffectedPart   @relation(fields: [affectedPartId], references: [id])
  managementType   ManagementType @relation(fields: [managementTypeId], references: [id])
  managementRole   ManagementRole @relation(fields: [managementRoleId], references: [id])
  clinicalRecord   ClinicalRecord @relation(fields: [clinicalRecordId], references: [id])
  affectedPartId   String         @db.VarChar(100)
  managementTypeId String         @db.VarChar(100)
  clinicalRecordId String         @db.VarChar(100)
  managementRoleId String         @db.VarChar(100)

  @@id([affectedPartId, managementTypeId, clinicalRecordId, managementRoleId])
  @@map("clinical_record_managements")
}

model SessionType {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(100)
  ScientificSession ScientificSession[]

  @@map("session_types")
}

model ScientificRole {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(100)
  ScientificSession ScientificSession[]

  @@map("scientific_roles")
}

model ScientificSession {
  id                 String             @id @db.VarChar(100)
  Unit               Unit?              @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId             String?            @db.VarChar(100)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  topic              String             @db.VarChar(255)
  title              String             @db.VarChar(255)
  reference          String             @db.VarChar(255)
  note               String?            @db.Text
  attachment         String?            @db.VarChar(255)
  studentFeedback    String?            @db.Text
  supervisorFeedback String?            @db.Text
  verificationStatus VerificationStatus @default(INPROCESS)
  supervisor         Supervisor         @relation(fields: [supervisorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supervisorId       String             @db.VarChar(100)
  Student            Student?           @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId          String?            @db.VarChar(100)
  rating             Int?               @default(0) @db.UnsignedTinyInt()
  sessionType        SessionType        @relation(fields: [sessionTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scientificRole     ScientificRole     @relation(fields: [scientificRoleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sessionTypeId      Int
  scientificRoleId   Int

  @@map("scientific_session")
}

model SelfReflection {
  id                 String             @id @db.VarChar(100)
  Unit               Unit?              @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId             String?            @db.VarChar(100)
  createdAt          DateTime           @default(now())
  content            String             @db.Text
  Student            Student?           @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId          String?            @db.VarChar(100)
  rating             Int?               @default(0) @db.UnsignedTinyInt
  studentFeedback    String?            @db.Text
  supervisorFeedback String?            @db.Text
  verificationStatus VerificationStatus @default(INPROCESS)

  @@map("self_reflections")
}

model ProblemConsultation {
  id                 String             @id @db.VarChar(100)
  Unit               Unit?              @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId             String?            @db.VarChar(100)
  createdAt          DateTime           @default(now())
  problem            String             @db.Text
  Student            Student?           @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId          String?            @db.VarChar(100)
  rating             Int?               @default(0) @db.UnsignedTinyInt
  solution           String?            @db.Text
  verificationStatus VerificationStatus @default(INPROCESS)

  @@map("problem_consultations")
}

model Competency {
  id                 String             @id @db.VarChar(100)
  name               String?            @db.VarChar(255)
  competencyType     CompetencyType
  rating             Int                @default(0) @db.UnsignedTinyInt
  verificationStatus VerificationStatus @default(INPROCESS)
  Student            Student?           @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId          String?            @db.VarChar(100)
  Unit               Unit?              @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId             String?            @db.VarChar(100)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  case               CaseType?          @relation(fields: [caseTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  skill              SkillType?         @relation(fields: [skillTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type               Type
  caseTypeId         Int?
  skillTypeId        Int?

  @@map("competencies")
}

model CaseType {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  Unit       Unit?        @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId     String?      @db.VarChar(100)
  Competency Competency[]

  @@map("case_types")
}

model SkillType {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  Unit       Unit?        @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId     String?      @db.VarChar(100)
  Competency Competency[]

  @@map("skill_types")
}

model Skill {
  id                 String             @id @db.VarChar(100)
  name               String             @db.VarChar(255)
  type               CompetencyType
  rating             Int                @default(0) @db.UnsignedTinyInt
  verificationStatus VerificationStatus @default(INPROCESS)
  Student            Student?           @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId          String?            @db.VarChar(100)
  Unit               Unit?              @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId             String?            @db.VarChar(100)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@map("skills")
}

model Case {
  id                 String             @id @db.VarChar(100)
  name               String             @db.VarChar(255)
  type               CompetencyType
  rating             Int                @default(0) @db.UnsignedTinyInt
  verificationStatus VerificationStatus @default(INPROCESS)
  Student            Student?           @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId          String?            @db.VarChar(100)
  Unit               Unit?              @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId             String?            @db.VarChar(100)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt

  @@map("cases")
}

model Topic {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  SglTopic SglTopic[]
  CstTopic CstTopic[]

  @@map("topics")
}

model SGL {
  id                 String             @id @db.VarChar(100)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
  verificationStatus VerificationStatus @default(INPROCESS)
  Student            Student?           @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId          String?            @db.VarChar(100)
  Unit               Unit?              @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId             String?            @db.VarChar(100)
  topics             SglTopic[]

  @@map("sgls")
}

model SglTopic {
  id                 String             @id @db.VarChar(100)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
  verificationStatus VerificationStatus @default(INPROCESS)
  notes              String?            @db.Text
  startTime          BigInt?            @db.UnsignedBigInt
  endTime            BigInt?            @db.UnsignedBigInt
  supervisor         Supervisor         @relation(fields: [supervisorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supervisorId       String             @db.VarChar(100)
  topic              Topic[]
  SGL                SGL?               @relation(fields: [sGLId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sGLId              String?            @db.VarChar(100)

  @@map("sgl_topics")
}

model CST {
  id                 String             @id @db.VarChar(100)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
  verificationStatus VerificationStatus @default(INPROCESS)
  Student            Student?           @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId          String?            @db.VarChar(100)
  Unit               Unit?              @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId             String?            @db.VarChar(100)
  topics             CstTopic[]

  @@map("csts")
}

model CstTopic {
  id                 String             @id @db.VarChar(100)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
  verificationStatus VerificationStatus @default(INPROCESS)
  notes              String?            @db.Text
  startTime          BigInt?            @db.UnsignedBigInt
  endTime            BigInt?            @db.UnsignedBigInt
  supervisor         Supervisor         @relation(fields: [supervisorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supervisorId       String             @db.VarChar(100)
  topic              Topic[]
  CST                CST[]
  topicId            Int?

  @@map("cst_topics")
}

model DailyActivity {
  id                 String             @id @db.VarChar(100)
  weekNum            Int                @db.UnsignedTinyInt
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
  verificationStatus VerificationStatus @default(INPROCESS)
  Student            Student?           @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId          String?            @db.VarChar(100)
  Unit               Unit?              @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId             String?            @db.VarChar(100)
  activities         Activity[]

  @@map("daily_activities")
}

model Activity {
  id                 String             @id @db.VarChar(100)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
  day                String
  activityStatus     ActivityStatus     @default(NOT_ATTEND)
  detail             String?            @db.Text
  supervisor         Supervisor?        @relation(fields: [supervisorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  supervisorId       String?            @db.VarChar(100)
  location           ActivityLocation?  @relation(fields: [activityLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  verificationStatus VerificationStatus @default(INPROCESS)
  activityLocationId Int?
  ActivityName       ActivityName?      @relation(fields: [activityNameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  activityNameId     Int?
  DailyActivity      DailyActivity?     @relation(fields: [dailyActivityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dailyActivityId    String?            @db.VarChar(100)

  @@map("activities")
}

model ActivityName {
  id       Int        @id @default(autoincrement())
  name     String
  Activity Activity[]
}

model ActivityLocation {
  id                  Int                   @id @default(autoincrement())
  name                String
  Activity            Activity[]
  MiniCex             MiniCex[]
  ScientificAssesment ScientificAssesment[]

  @@map("activity_locations")
}

model Assesment {
  id                    String               @id @db.VarChar(100)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @default(now()) @updatedAt
  Student               Student?             @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId             String?              @db.VarChar(100)
  Unit                  Unit?                @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId                String?              @db.VarChar(100)
  type                  AssesmentType
  MiniCex               MiniCex?             @relation(fields: [miniCexId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ScientificAssesment   ScientificAssesment? @relation(fields: [scientificAssesmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PersonalBehaviour     PersonalBehaviour?   @relation(fields: [personalBehaviourId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  osce                  OSCE?                @relation(fields: [oSCEId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cbt                   CBT?                 @relation(fields: [cBTId], references: [id])
  miniCexId             String?              @unique @db.VarChar(100)
  scientificAssesmentId String?              @unique @db.VarChar(100)
  personalBehaviourId   String?              @unique @db.VarChar(100)
  oSCEId                String?              @unique @db.VarChar(100)
  cBTId                 String?              @unique @db.VarChar(100)

  @@map("assesments")
}

model PersonalBehaviour {
  id                     String                   @id @db.VarChar(100)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now()) @updatedAt
  assesmentId            String?                  @db.VarChar(100)
  Assesment              Assesment?
  PersonalBehaviourGrade PersonalBehaviourGrade[]

  @@map("personal_behaviours")
}

model PersonalBehaviourGradeItem {
  id                         Int                        @id @default(autoincrement())
  name                       String                     @db.VarChar(255)
  personalBehaviourGradeType PersonalBehaviourGradeType
  PersonalBehaviourGrade     PersonalBehaviourGrade[]
}

model PersonalBehaviourGrade {
  id                           Int                        @id @default(autoincrement())
  verificationStatus           VerificationStatus         @default(INPROCESS)
  gradeItem                    PersonalBehaviourGradeItem @relation(fields: [personalBehaviourGradeItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  PersonalBehaviour            PersonalBehaviour?         @relation(fields: [personalBehaviourId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  personalBehaviourId          String?                    @db.VarChar(100)
  personalBehaviourGradeItemId Int
}

model MiniCex {
  id                 String            @id @db.VarChar(100)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt
  assesmentId        String?           @db.VarChar(100)
  case               String?
  location           ActivityLocation? @relation(fields: [activityLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Assesment          Assesment?
  MiniCexGrade       MiniCexGrade[]
  activityLocationId Int?
  weight             Float             @default(0.25) @db.Float

  @@map("mini_cexs")
}

model OSCE {
  id          String     @id @db.VarChar(100)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  case        String?
  weight      Float      @default(0.3) @db.Float
  Assesment   Assesment?
  assesmentId String?    @db.VarChar(100)
  score       Float?     @default(0)

  @@map("osces")
}

model CBT {
  id          String     @id @db.VarChar(100)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  case        String?
  weight      Float      @default(0.3) @db.Float
  Assesment   Assesment?
  score       Float?     @default(0)
  assesmentId String?    @db.VarChar(100)

  @@map("cbts")
}

model ScientificAssesment {
  id                 String                     @id @db.VarChar(100)
  title              String?                    @db.VarChar(255)
  location           ActivityLocation?          @relation(fields: [activityLocationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  activityLocationId Int?
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @default(now()) @updatedAt
  assesmentId        String?                    @db.VarChar(100)
  grades             ScientificAssesmentGrade[]
  Assesment          Assesment?
  weight             Float                      @default(0.15) @db.Float

  @@map("scientific_assesments")
}

model ScientificAssesmentGradeItem {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @db.VarChar(255)
  scientificGradeType      ScientificGradeType
  ScientificAssesmentGrade ScientificAssesmentGrade[]
}

model ScientificAssesmentGrade {
  id                             Int                          @id @default(autoincrement())
  score                          Float?                       @db.Float
  gradeItem                      ScientificAssesmentGradeItem @relation(fields: [scientificAssesmentGradeItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ScientificAssesment            ScientificAssesment?         @relation(fields: [scientificAssesmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  scientificAssesmentId          String?                      @db.VarChar(100)
  scientificAssesmentGradeItemId Int
}

model MiniCexGradeItem {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  MiniCexGrade MiniCexGrade[]
}

model MiniCexGrade {
  id                 Int               @id @default(autoincrement())
  name               String
  score              Float?            @default(0)
  gradeItem          MiniCexGradeItem? @relation(fields: [miniCexGradeItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  MiniCex            MiniCex?          @relation(fields: [miniCexId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  miniCexId          String?           @db.VarChar(100)
  miniCexGradeItemId Int?
}

model Reference {
  id     Int     @id @default(autoincrement())
  file   String? @db.VarChar(255)
  Unit   Unit?   @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unitId String? @db.VarChar(100)

  @@map("references")
}

enum ScientificGradeType {
  SAJIAN
  CARA_PENYAJIAN
  DISKUSI
}

enum PersonalBehaviourGradeType {
  ALTRUISM
  HONOR_INTEGRITY
  CARING_COMPASSION
  RESPECT
  RESPONSIBILITY
  ACCOUNTABILITY
  EXCELLENCE_SCHOLARSHIP
  LEADERSHIP
}

enum AssesmentType {
  MINI_CEX
  SCIENTIFIC_ASSESMENT
  PERSONAL_BEHAVIOUR
  OSCE
  CBT
}

enum CompetencyType {
  OBTAINED
  DISCUSSED
  OBSERVED
}

enum Type {
  SKILL
  CASE
}

enum Badges {
  CEU
  HEAD_DIV // kepala bagian
}

enum Role {
  SUPERVISOR
  STUDENT
  ADMIN
  DPK
  ER // tim kordik
}

enum Gender {
  MALE
  FEMALE
}

enum VerificationStatus {
  VERIFIED
  INPROCESS
  UNVERIFIED
}

enum ActivityStatus {
  SICK
  ATTEND
  NOT_ATTEND
}
